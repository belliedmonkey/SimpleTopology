<svg  onload='Init(evt)'   onmousedown='Grab(evt)'    onmousemove='Drag(evt)'
   onmouseup='Drop(evt)'  contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" version="1.0">
<script type="text/javascript">
<![CDATA[
var SVGDocument = null;
var SVGRoot = null;
var TrueCoords = null;
var GrabPoint = null;
var BackDrop = null;
var DragTarget = null;

document.oncontextmenu=RightMouseDown;
document.onmousedown = mouseDown; 
document.onmouseup = mouseup; 



function zoomSvg(width,height) {
	SVGRoot.setAttribute("viewBox","0 0 "+width+" "+ height);
	SVGRoot.setAttributeNS("http://www.w3.org/2000/svg","width",width);
	SVGRoot.setAttributeNS("http://www.w3.org/2000/svg","height",height);
}

function mouseup(e) {
    if (e.which==3) {//righClick
			var tips = SVGDocument.getElementById('tips');
			if (tips != null) {
				SVGRoot.removeChild(tips);
			}
    }
      
}

function mouseDown(e) {
    if (e.which==3) {//righClick
        var node = e.target;
        var parent = node.parentNode;
        details = parent.getAttribute("node_detail");
        if (details != null) {
        	showTips(details, parent);
        }
    }  
}

function showTips(details, parent) {
	var group = SVGDocument.createElementNS("http://www.w3.org/2000/svg","g");
	var rect = SVGDocument.createElementNS("http://www.w3.org/2000/svg","rect");
	group.setAttribute("id","tips");
	rect.setAttribute("rx","5");
	rect.setAttribute("ry","5");
	rect.setAttribute("x","0");
	rect.setAttribute("y","0");
	rect.setAttribute("width","300");
	rect.setAttribute("height","50");
	rect.setAttribute("style","visibility:hidden");
	var text = SVGDocument.createElementNS("http://www.w3.org/2000/svg","text");
	text.setAttribute("x","12");
	text.setAttribute("y","12");
	text.setAttribute("style", "fill: #414141; font-size: 12px; font-family:arial; visibility: visible");
	var detailList = details.split('%%');
	var xdy = 0;
	var maxLength = 0;
	for (var i = 0; i <detailList.length; i++) {
		if (detailList[i].length > maxLength) {
			maxLength = detailList[i].length;
		}
		var tspan = SVGDocument.createElementNS("http://www.w3.org/2000/svg","tspan");
		tspan.setAttribute("x","0");
		tspan.setAttribute("dy",xdy);
		var txtNode = SVGDocument.createTextNode(detailList[i]);
		tspan.appendChild(txtNode);
		text.appendChild(tspan);
		xdy = xdy + 13;
	}
	if (maxLength*12 > 300) {
		rect.setAttribute("width","" + maxLength*7);
	}
  rect.setAttribute("style", "fill: #b1c5cf; visibility: visible");
  group.setAttribute("style", "fill: #b1c5cf; visibility: visible");
  group.appendChild(rect);
  group.appendChild(text);
  group.setAttribute("transform",parent.parentNode.getAttribute("transform"));
  SVGRoot.appendChild(group);
}


function RightMouseDown() { return false; }



function Init(evt) {


	SVGDocument = evt.target.ownerDocument;
	SVGRoot = SVGDocument.documentElement;

	TrueCoords = SVGRoot.createSVGPoint();
	GrabPoint = SVGRoot.createSVGPoint();

	BackDrop = SVGDocument.getElementById('BackDrop');
	
	var parentWnd = window.parent;
	var svgNode = parentWnd.document.getElementById("svg");
	var width = svgNode.getAttribute("width");
	var height = svgNode.getAttribute("height");
	SVGRoot.setAttribute("transform","scale(0.5,1)");
	SVGDocument.svgWnd = window;
	var svgPanel = parentWnd.Ext.getCmp("svgPanel");
	var svgWindow = parentWnd.Ext.getCmp('svgWindow');
	var svgWidth = SVGRoot.getAttribute("width");
	var svgHeight = SVGRoot.getAttribute("height");
	if (svgWindow.getWidth() > svgWidth) {
		svgPanel.setWidth(svgWindow.getWidth());
	} else {
		svgPanel.setWidth(svgWidth);
	}
	if (svgWindow.getHeight() > svgHeight) {
		svgPanel.setHeight(svgWindow.getHeight());
	} else {
		svgPanel.setHeight(svgHeight);
	}
	svgWindow.syncSize();
}


function Grab(evt) {
if (evt.which==3) {
return;
}

	var targetElement = evt.target;

	if (BackDrop != targetElement) {

		DragTarget = targetElement.parentNode.parentNode;

		DragTarget.parentNode.appendChild(DragTarget);

		DragTarget.setAttributeNS(null, 'pointer-events', 'none');

		var transMatrix = DragTarget.getCTM();
		GrabPoint.x = TrueCoords.x - Number(transMatrix.e);
		GrabPoint.y = TrueCoords.y - Number(transMatrix.f);

	}
};

function Drag(evt) {
if (evt.which==3) {
return;
}

	GetTrueCoords(evt);

	if (DragTarget) {

		var width = DragTarget.getAttribute('width');
		var height = DragTarget.getAttribute('height');

		var newX = TrueCoords.x - GrabPoint.x;
		var newY = TrueCoords.y - GrabPoint.y;

		DragTarget.setAttribute('transform', 'translate(' + newX + ',' + newY
				+ ')');
		var lines = SVGDocument.getElementsByTagName('line');
		for ( var i = 0; i < lines.length; i++) {
			var line = lines[i];
			var sourceId = line.getAttribute('source');
			var targetId = line.getAttribute('target');
			if (sourceId == DragTarget.getAttribute('id')) {
				line.setAttribute('x1', newX + width / 2);
				line.setAttribute('y1', newY + parseInt(height, 10));
			}
			if (targetId == DragTarget.getAttribute('id')) {
				line.setAttribute('x2', newX + width / 2);
				line.setAttribute('y2', newY);
			}
		}
	}
};

function Drop(evt) {
if (evt.which==3) {
return;
}

	if (DragTarget) {

		var targetElement = evt.target;

		DragTarget.setAttributeNS(null, 'pointer-events', 'all');
		if ('Folder' == targetElement.parentNode.id) {

			targetElement.parentNode.appendChild(DragTarget);
			alert(DragTarget.id
					+ ' has been dropped into a folder, and has been inserted as a child of the containing group.');
		} else {

		}

		DragTarget = null;
	}
};

function GetTrueCoords(evt) {

	var newScale = SVGRoot.currentScale;
	var translation = SVGRoot.currentTranslate;
	TrueCoords.x = (evt.clientX - translation.x) / newScale;
	TrueCoords.y = (evt.clientY - translation.y) / newScale;
};



function resizeText() {
	var txts = document.getElementsByTagName("text");
	
	for (var i = 0; i < txts.length; i++) {
		var txt = txts[i].textContent; 
		var maxLen = txts[i].getAttribute('MaxLength');
		if (txt.length >= maxLen) {
			txt = txt.substring(0,maxLen-1);
			txt = txt + '...';
		}
		txts[i].textContent = txt;
	}
}

]]>
</script>	
</svg>